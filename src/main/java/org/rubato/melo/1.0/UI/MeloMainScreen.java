/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.rubato.melo;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.text.*;
/** *
 * @author nil
 */
public class MeloMainScreen extends JPanel {

    /**
     * Creates new form MeloDisplay
     */
    private MeloRubette meloRubette;
    public MeloMainScreen(MeloRubette meloRubetteT) {
        meloRubette = meloRubetteT;
        initComponents();
    }

    public int getNoteLimit() {
        try {
            int noteLimit = Integer.parseInt(noteLimitTextField.getText());
            return noteLimit;
        } catch (Exception e) {
        }
        return 1; //default
    }
    public double getNeighbour() {
        try {
            double neighbour = Double.parseDouble(neighbourTextField.getText());
            return neighbour;
        } catch (Exception e) {
        }
        return 100;
    }
    public double getSpan() {
        try {
            double span = Double.parseDouble(spanTextField.getText());
            return span;
        } catch (Exception e) {
        }
        return 1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    //
    private void initLayout() {
        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 400, GroupLayout.PREFERRED_SIZE)
                .addGap(0, 160, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(neighbourLabel)
                                    .addComponent(spanLabel))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(spanTextField, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 234, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(neighbourTextField, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 234, GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(noteLimitLabel)
                                .addGap(101, 101, 101)
                                .addComponent(noteLimitTextField, GroupLayout.PREFERRED_SIZE, 234, GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewResultBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(variLabel)
                            .addComponent(invCheckBox)
                            .addComponent(retroCheckBox)
                            .addComponent(retroInvCheckBox))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(calWeightBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(shapeSelecLabel)
                                .addGap(42, 42, 42)
                                .addComponent(shapeSelecComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))))
                .addGap(113, 113, 113))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(variLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(shapeSelecComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(shapeSelecLabel))
                        .addGap(18, 18, 18)
                        .addComponent(calWeightBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(invCheckBox)
                        .addGap(23, 23, 23)
                        .addComponent(retroCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(retroInvCheckBox)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(noteLimitLabel)
                    .addComponent(noteLimitTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(spanLabel)
                    .addComponent(spanTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(neighbourLabel)
                    .addComponent(neighbourTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addComponent(viewResultBtn))
                .addGap(32, 32, 32))
        );
    }

    private void initComponents() {
        variLabel = new JLabel();
        invCheckBox = new JCheckBox();
        invCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    meloRubette.setIfInv(true);
                } else {
                    meloRubette.setIfInv(false);
                };
            }
        });
        retroCheckBox = new JCheckBox();
        retroCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    meloRubette.setIfRetro(true);
                } else {
                    meloRubette.setIfRetro(false);
                };
            }
        });
        retroInvCheckBox = new JCheckBox();
        retroInvCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    meloRubette.setIfRetroInv(true);
                } else {
                    meloRubette.setIfRetroInv(false);
                };
            }
        });
        variLabel.setText("Variation List");
        invCheckBox.setText("inversion");
        retroCheckBox.setText("retrograde");
        retroInvCheckBox.setText("retro-inversion");

        noteLimitLabel = new JLabel();
        noteLimitLabel.setText("note's limit");
        noteLimitTextField = new JTextField();
        //noteLimitTextField.setMinimum(0);
        //noteLimitTextField.setMaximum(5);
        noteLimitTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    int noteLimit = Integer.parseInt(noteLimitTextField.getText());
                    meloRubette.setNoteLimit(noteLimit);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        spanLabel = new JLabel();
        spanLabel.setText("span");
        spanTextField = new JTextField();
        //spanTextField.setMinimum(0);
        //spanTextField.setMaximum(5);
        spanTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    double span = Double.parseDouble(spanTextField.getText());
                    meloRubette.setSpan(span);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });


        jSeparator1 = new JSeparator();

        
        shapeSelecLabel = new JLabel();
        shapeSelecLabel.setText("shape");
        shapeSelecComboBox = new JComboBox<>();
        shapeSelecComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "rigid", "diastematic", "elastic" }));
        shapeSelecComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                meloRubette.setShapeSelec(shapeSelecComboBox.getSelectedIndex());
            }
        });

        calWeightBtn = new JButton();
        calWeightBtn.setText("calculate weight");
        calWeightBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    int noteLimit = Integer.parseInt(noteLimitTextField.getText());
                    meloRubette.setNoteLimit(noteLimit);
                    System.out.println("before cal weight note's limit:" + noteLimit);

                    double span = Double.parseDouble(spanTextField.getText());
                    meloRubette.setSpan(span);
                    System.out.println("before cal weight note's limit:" + span);

                    double neighbour = Double.parseDouble(neighbourTextField.getText());
                    meloRubette.setNeighbour(neighbour);
                    System.out.println("before cal weight neighbour:" + neighbour);

                    meloRubette.calWeight(noteLimit, span, neighbour);

                    viewResultBtn.setOpaque(true);
                    viewResultBtn.setEnabled(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        neighbourLabel = new JLabel();
        neighbourLabel.setText("neighbour");
        neighbourTextField = new JTextField();
        //neighbourTextField.setMinimum(0);
        //neighbourTextField.setMaximum(5);
        neighbourTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    double neighbour = Double.parseDouble(neighbourTextField.getText());
                    meloRubette.setNeighbour(neighbour);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }); 

        viewResultBtn = new JButton();
        viewResultBtn.setText("view result");
        //viewResultBtn.setEnabled(false);
        //viewResultBtn.setOpaque(false);
        viewResultBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
				    createResultScreen();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        initLayout();
    }// </editor-fold>//GEN-END:initComponents
    
	public void createResultScreen()
		{
			EventQueue.invokeLater(new Runnable()
			{
				@Override
				public void run()
				{
					JFrame frame = new JFrame("Result");
					frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
					try 
					{
					   UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
					} catch (Exception e) {
					   e.printStackTrace();
					}

                     

					//JPanel panel = new JPanel();
					//panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
					//panel.setOpaque(true);
					//JTextArea textArea = new JTextArea(15, 50);
					//textArea.setWrapStyleWord(true);
					//textArea.setEditable(false);
					//JScrollPane scroller = new JScrollPane(textArea);
					//scroller.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
					//scroller.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
					//JPanel inputpanel = new JPanel();
					//inputpanel.setLayout(new FlowLayout());
					//JTextField input = new JTextField(20);
					//JButton button = new JButton("Enter");
					//DefaultCaret caret = (DefaultCaret) textArea.getCaret();
					//caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
					//panel.add(scroller);
					//inputpanel.add(input);
					//inputpanel.add(button);
					//panel.add(inputpanel);

					//JPanel panel2 = new JPanel();
					//panel2.setLayout(new BoxLayout(panel2, BoxLayout.Y_AXIS));
					//panel2.setOpaque(true);
					//JTextArea textArea2 = new JTextArea(15, 50);
					//textArea2.setWrapStyleWord(true);
					//textArea2.setEditable(false);
					//JScrollPane scroller2 = new JScrollPane(textArea2);
					//scroller2.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
					//scroller2.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
					//JPanel inputpanel2 = new JPanel();
					//inputpanel2.setLayout(new FlowLayout());
					//JTextField input2 = new JTextField(20);
					//JButton button2 = new JButton("Enter");
					//DefaultCaret caret2 = (DefaultCaret) textArea2.getCaret();
					//caret2.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
					//panel2.add(scroller2);
					//inputpanel2.add(input2);
					//inputpanel2.add(button2);
					//panel2.add(inputpanel2);

                    //JPanel viewResultPanel = new JPanel(); 
					//viewResultPanel.setLayout(new BoxLayout(viewResultPanel, BoxLayout.Y_AXIS));
                    //viewResultPanel.setOpaque(true);
                    //viewResultPanel.add(panel);
                    //viewResultPanel.add(panel2);
                    
                    viewResultScreen = new ViewResultScreen(meloRubette);

					frame.getContentPane().add(BorderLayout.CENTER, viewResultScreen);

					frame.pack();
                    Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
                    frame.setLocation(dim.width/2-frame.getSize().width/2, frame.getHeight()/2-frame.getSize().height/2);
					//frame.setLocationByPlatform(true);
					frame.setVisible(true);
					frame.setResizable(false);
					viewResultScreen.requestFocus();
				}
			});
		}


    
    private JButton calWeightBtn;
    private JCheckBox invCheckBox;
    private JSeparator jSeparator1;
    private JLabel neighbourLabel;
    private JTextField neighbourTextField;
    private JLabel noteLimitLabel;
    private JTextField noteLimitTextField;
    private JCheckBox retroCheckBox;
    private JCheckBox retroInvCheckBox;
    private JComboBox<String> shapeSelecComboBox;
    private JLabel shapeSelecLabel;
    private JLabel spanLabel;
    private JTextField spanTextField;
    private JLabel variLabel;
    private JButton viewResultBtn;

    private ViewResultScreen viewResultScreen;
    // End of variables declaration//GEN-END:variables
    //
}

