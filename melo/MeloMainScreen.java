/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package melo;

import javax.swing.JFrame;
import java.awt.*;
import java.awt.event.*;

/**
 *
 * @author nil
 */
public class MeloMainScreen extends javax.swing.JPanel {

    /**
     * Creates new form MeloDisplay
     */
    private MeloRubette meloRubette;
    public MeloMainScreen(MeloRubette meloRubetteT) {
        meloRubette = meloRubetteT;
        initComponents();
    }

    public int getNoteLimit() {
        try {
            int noteLimit = Integer.parseInt(noteLimitTextField.getText());
            return noteLimit;
        } catch (Exception e) {
        }
        return 1; //default
    }
    public double getNeighbour() {
        try {
            double neighbour = Double.parseDouble(neighbourTextField.getText());
            return neighbour;
        } catch (Exception e) {
        }
        return 100;
    }
    public double getSpan() {
        try {
            double span = Double.parseDouble(spanTextField.getText());
            return span;
        } catch (Exception e) {
        }
        return 1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    //
    private void initLayout() {
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 160, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(neighbourLabel)
                                    .addComponent(spanLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spanTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(neighbourTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(noteLimitLabel)
                                .addGap(101, 101, 101)
                                .addComponent(noteLimitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(variLabel)
                            .addComponent(invCheckBox)
                            .addComponent(retroCheckBox)
                            .addComponent(retroInvCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(calWeightBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(shapeSelecLabel)
                                .addGap(42, 42, 42)
                                .addComponent(shapeSelecComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(113, 113, 113))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(variLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shapeSelecComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shapeSelecLabel))
                        .addGap(18, 18, 18)
                        .addComponent(calWeightBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(invCheckBox)
                        .addGap(23, 23, 23)
                        .addComponent(retroCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(retroInvCheckBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(noteLimitLabel)
                    .addComponent(noteLimitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spanLabel)
                    .addComponent(spanTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(neighbourLabel)
                    .addComponent(neighbourTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );
    }

    private void initComponents() {
        variLabel = new javax.swing.JLabel();
        invCheckBox = new javax.swing.JCheckBox();
        invCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    meloRubette.setIfInv(true);
                } else {
                    meloRubette.setIfInv(false);
                };
            }
        });
        retroCheckBox = new javax.swing.JCheckBox();
        retroCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    meloRubette.setIfRetro(true);
                } else {
                    meloRubette.setIfRetro(false);
                };
            }
        });
        retroInvCheckBox = new javax.swing.JCheckBox();
        retroInvCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    meloRubette.setIfRetroInv(true);
                } else {
                    meloRubette.setIfRetroInv(false);
                };
            }
        });
        variLabel.setText("Variation List");
        invCheckBox.setText("inversion");
        retroCheckBox.setText("retrograde");
        retroInvCheckBox.setText("retro-inversion");

        noteLimitLabel = new javax.swing.JLabel();
        noteLimitLabel.setText("note's limit");
        noteLimitTextField = new javax.swing.JTextField();
        //noteLimitTextField.setMinimum(0);
        //noteLimitTextField.setMaximum(5);
        noteLimitTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    int noteLimit = Integer.parseInt(noteLimitTextField.getText());
                    meloRubette.setNoteLimit(noteLimit);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        spanLabel = new javax.swing.JLabel();
        spanLabel.setText("span");
        spanTextField = new javax.swing.JTextField();
        //spanTextField.setMinimum(0);
        //spanTextField.setMaximum(5);
        spanTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    double span = Double.parseDouble(spanTextField.getText());
                    meloRubette.setSpan(span);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });


        jSeparator1 = new javax.swing.JSeparator();

        
        shapeSelecLabel = new javax.swing.JLabel();
        shapeSelecLabel.setText("shape");
        shapeSelecComboBox = new javax.swing.JComboBox<>();
        shapeSelecComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "rigid", "diastematic", "elastic" }));
        shapeSelecComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                meloRubette.setShapeSelec(shapeSelecComboBox.getSelectedIndex());
            }
        });

        calWeightBtn = new javax.swing.JButton();
        calWeightBtn.setText("calculate weight");
        calWeightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    int noteLimit = Integer.parseInt(noteLimitTextField.getText());
                    meloRubette.setNoteLimit(noteLimit);
                    System.out.println("before cal weight note's limit:" + noteLimit);

                    double span = Double.parseDouble(spanTextField.getText());
                    meloRubette.setSpan(span);
                    System.out.println("before cal weight note's limit:" + span);

                    double neighbour = Double.parseDouble(neighbourTextField.getText());
                    meloRubette.setNeighbour(neighbour);
                    System.out.println("before cal weight neighbour:" + neighbour);

                    meloRubette.calWeight(noteLimit, span, neighbour);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        neighbourLabel = new javax.swing.JLabel();
        neighbourLabel.setText("neighbour");
        neighbourTextField = new javax.swing.JTextField();
        //neighbourTextField.setMinimum(0);
        //neighbourTextField.setMaximum(5);
        neighbourTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    double neighbour = Double.parseDouble(neighbourTextField.getText());
                    meloRubette.setNeighbour(neighbour);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }); 

        initLayout();
    }// </editor-fold>//GEN-END:initComponents

    private void calWeightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calWeightBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_calWeightBtnActionPerformed

    private void neighbourTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neighbourTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_neighbourTextFieldActionPerformed


    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calWeightBtn;
    private javax.swing.JCheckBox invCheckBox;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel neighbourLabel;
    private javax.swing.JTextField neighbourTextField;
    private javax.swing.JLabel noteLimitLabel;
    private javax.swing.JTextField noteLimitTextField;
    private javax.swing.JCheckBox retroCheckBox;
    private javax.swing.JCheckBox retroInvCheckBox;
    private javax.swing.JComboBox<String> shapeSelecComboBox;
    private javax.swing.JLabel shapeSelecLabel;
    private javax.swing.JLabel spanLabel;
    private javax.swing.JTextField spanTextField;
    private javax.swing.JLabel variLabel;
    // End of variables declaration//GEN-END:variables
}
